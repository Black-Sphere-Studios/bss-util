**************************************************
* Black Sphere Studios Utility Library Changelog *
**************************************************

0.3.82
------
- Added windows-specific Registry manipulation functions
- Fixed bug in AdditiveFixedAllocator that over-allocated memory when consolidating
- Added AdditiveVariableAllocator
- Changed all comparisons to use a branch free sign check
- Fixed functor.h so Call() actually works.
- Moved lockless functions from bss_util.h to lockless.h
- Created bss_compiler.h and put in preliminary compiler detection.
- Changed 32bit/64bit to specific architectures.
- There is now a 64BIT flag that should be used only when you need to know the pointer size, not when using architecture specific assembly
- cLocklessQueue is now cLocklessByteQueue
- Adjusted cKhash, which now properly handles hash sets
- cAVL_Tree now uses standard old-style functors
- Fixed fsmall and added dsmall
- VERSION_INFO.Patch is now VERSION_INFO.Revision
- test.exe is now a comprehensive set of unit tests
- cAutoPtr.h now modifies unique_ptr to be easier to use (this can be turned off)
- Custom allocators now verify deallocated pointers and fill them with junk values when possible in debug mode
- All custom allocators using the Allocator class can be disabled by defining BSS_DISABLE_CUSTOM_ALLOCATORS. This is useful if a custom allocator does not fill deallocations with junk, or if the junk filling is insufficient, resulting in an invalid memory access bug being masked. Many compilers also have special hooks for detecting out of bounds memory accesses that only work with the default allocation routines.
- Rewrote cBinaryHeap
- Added bssreverse
- removed cVect.h
- Changed cAutoPtr to cUniquePtr
- Refactored the entire Compare methodology and introduced methods of doing only LT and GT comparisons.
- Created bss_algo.h and moved shuffle() to it.
- added for_all()
- added binsearch_near and variants
- Implemented library wide utf8 decoding. Most wchar_t implementations remain, but all char* functions are translated to wchar_t internally. If you happen to recieve strings in wchar_t format, this allows you to avoid unnecessary encoding/decoding while still ensuring all text is utf8 enabled. You should #define _UNICODE in your application if you want to enforce unicode compatability. cStr conversion between cStr <-> cStrW use unicode encoder/decoders, so unicode information is always preserved.
- Removed wchar_t specialization from cINIstorage and certain other things. You can no longer output to a wostream - instead, all output will be utf8 encoded.
- Removed Iterator.h and standardized iterators for linked lists, added iterator based begin/end functions.
- Added non-standard removal specific iterator for linked lists.
- Extended compiler specific switches and available information
- Added x86_64 platform to project and configured for 64-bit compilation.
- Created workarounds for assembly based functions and removed others in x86_64, allowing bss_util to compile in x86_64
- Adjusted some x86 assembly and added CPU_Barrier() as an efficient way to prevent CPU re-ordering.
- Changed hash to use iterators
- Existing iterator Begin/IterStart functions renamed to begin() to support range-based for loops
- Added unit testing.

0.3.81
------
- Added CLASS_PROP_VAL and CLASS_PROP_WRITEONLY_VAL for value-type class property generation
- Added smaller valued log2() overloads (ushort and uchar)
- Changed cSettings CMD parsing to simply interprete the existence of a boolean flag as setting the value to true
- Fixed a cSettings const char* assignment glitch
- cSettings now forces char values to write as numbers
- Added char values to possible conversions for cINIEntry
- Added bytesearch() function
- Fixed bizarre bug where fopen in text mode "helpfully" replaced all \n with \n\r and caused infinitely expanding newlines.
- Added generic Iterator class and linkedlist implementations
- Made header gaurds more unique
- Changed the command argument parser to return an unsigned int on size
- filesize returns an unsigned long long instead of an unsigned int
- Added SSCANF to deprecated list
- cMap now properly uses the Key traits
- Fixed unholy deluge of useless dll warnings spawned by cStr
- cArrayConstruct now properly copies values from other cArrayConstruct objects with respect to constructors
- Made cArraySafe which properly deconstructs and reconstructs all objects for full type safety
- cArraySort and cMap can now use any cArraySimple/cArrayConstruct/cArraySafe 
- Added IsValid() helper function to cINIentry
- Implemented cAutoPtr (modification of standard auto_ptr)
- Changed all GetSize/GetLength to just Size()/Length()
- Added cAutoRef
- cObjSwap now allows arrays
- Completely rewrote bss_Log
- Added cArrayCircular
- Added check for self-assignment to most assignment operators where necessary
- Added move semantics to all low-level objects
- Added GetBitMask and C equivelent
- Changed cArraySimple to require cArrayWrap to be accessible (reduces inheritance issues)

0.3.8
-----
- Initial Public Release