**************************************************
* Black Sphere Studios Utility Library Changelog *
**************************************************

0.3.84
------
- Tweaked internal constant names to be less likely to collide with reserved identifiers
- Added GetEntryNode() and GetSectionNode()
- Added bss_util.rc so windows builds contain version/copyright information.
- Version numbers are now #define'd in bss_defines.h and pasted into the version number struct
- Removed DELETE_SAFE macros because you really should be using unique_ptr for that kind of stuff.
- Removed CLONE_ME macros because its way too easy to just copy+paste that and you never have to modify it again.
- Changed GetKeyPtrOnly to return KHVAL instead of KHVAL& so it actually works properly
- Added STRISWAP and WCSISWAP typedefs to cObjSwap.h
- Changed RemoveShrink to Remove and added Add() to cArrayWrap
- Changed cINIentry to always store a 64-bit integer, and changed GetLong to GetInt
- Added single-consumer, single-producer lockless queue and corresponding tests.
- Fixed cAVLTree's handling of constructors, destructors and return values, so you can now use standard classes as items.
- Removed vestigial cBucketAlloc.h
- Replaced ::operator new and ::operator delete with malloc and free in bss_alloc.h to maintain consistency.
- Added more details to bss_compiler.h including an attempt to determine endianness.
- Added Front(), Back(), and PopLast() to cArrayCircular, which now preserves its state after SetSize()
- Changed Insert() to Push(), PopRoot() to Pop(), RemoveRoot() to Discard(), and PeekRoot() to Peek() on cPriorityQueue and added Get(), Remove() and unit tests.
- Added some static assertions
- Removed cAutoList.h
- Rewrote cStrTable using cArraySimple and added the ability to append a string, along with unit tests.
- Added bss_dual.h and unit tests for automatic differentiation
- fixed a few operators in FixedPt
- Added AlertBox() convenience function
- Fixed VC++ intermediate directories for 64-bit compile
- Added cBitWrap and sseVeci64
- Refactored cRBT_List into cTRBtree and tweaked cAVLtree
- Fixed move/copy constructors and assignment operators for cAllocTracker
- Added LLInsertFull and LLInsertAfterFull convenience functions
- Changed default initial sizes from 1 to 0 where appropriate to avoid needless memory allocations
- Marked as LargeAddressAware

0.3.83
------
- Added ForceWin64Crash(), which is a function that shouldn't exist but is necessary to prevent 64-bit Windows 7 from pretending crashes that occur over a kernal barrier never happened, which causes undefined, insanely weird and unpredictable behavior.
- Fixed the project to throw on Win32 errors to bypass AFX stack corruption bugs in the debugger.
- Changed how cAllocTracker works
- Optimized cAllocTracker so that, if using the default allocator, it uses no memory.
- Improved lambda handling
- Removed [] from cBitField because of all the conflicts it created
- Adjusted logging functions
- cArraySafe now uses std::move in Remove()
- cLinkedArray now uses move semantics and no longer supports traits (traits are incompatible with move semantics)
- Standardized function pointer calls to use less ambiguous syntax in certain functions
- Fixed broken algorithm in binsearch_exact and added unit tests.
- Added __restrict to UTF8 conversion functions because they explode if output==input anyway.
- Removed cThread
- Removed atomic_inc and replaced with atomic_xadd. Intrinsics are now used when possible for MSC in lockless.h
- Added atomic_xchg
- x64 compile now passes all tests
- _trimpath more efficient
- log times now work properly and don't give negative hours
- cObjSwap no longer uses Traits (which is a good thing because it would have exploded the instant someone tried using reference traits in it)
- Added sseVec for safe SSE optimized vector operations.
- Added tests for object-based cObjSwap and sseVec.
- cKhash now supports move semantics on insert and setvalue, and no longer uses Traits
- bss_traits.h has been removed
- Removed cFixedSizeAlloc
- Renamed cFixedChunkAlloc to cFixedAlloc
- Fixed compile crash when using DISABLE_CUSTOM_ALLOCATORS
- Reorganized source folder
- Cleared out unnecessary CLR related tags
- Renamed VSPRINTF to VSNPRINTF because vsprintf is actually an unrelated function, and updated cStr references
- Added VSCPRINTF to deprecated function list in preperation for GCC compilation (currently nonfunctional)
- cINIstorage split into cINIstorage.h, cINIsection.h, cINIentry.h, and accompanying *.cpp files
- cINIstorage is now a linked list with significantly less overhead for handling unique section and entry IDs.
- Added Front() and Back() to cArrayWrap
- Adjusted cArraySimple to avoid allocating an array in a constructor if its given an initial size of 0, which can be very valuable when you need to avoid malloc() hits.
-! Swapped keyinstance and secinstance in cINIstorage EditEntry to make it consistent with GetEntry.
- cStrT::SetSize has been removed and cStrT::StripChar actually does what it says it does
- cStrT::RecalcSize is no longer capable of touching memory that was reserved and modified. If you were using this before with reserve(), you should switch to resize().
- Removed using namespace std; from StreamSplitter and fixed broken namespace references
- StreamSplitter, bss_Log, and bss_debuginfo now only have move semantics. For GCC, StreamSplitter has NO move or copy constructors (because stream_buf doesn't).

0.3.82
------
- Added windows-specific Registry manipulation functions
- Fixed bug in AdditiveFixedAllocator that over-allocated memory when consolidating
- Added AdditiveVariableAllocator
- Changed all comparisons to use a branch free sign check
- Fixed functor.h so Call() actually works.
- Moved lockless functions from bss_util.h to lockless.h
- Created bss_compiler.h and put in preliminary compiler detection.
- Changed 32bit/64bit to specific architectures.
- There is now a 64BIT flag that should be used only when you need to know the pointer size, not when using architecture specific assembly
- cLocklessQueue is now cLocklessByteQueue
- Adjusted cKhash, which now properly handles hash sets
- cAVL_Tree now uses standard old-style functors
- Fixed fsmall and added dsmall
- VERSION_INFO.Patch is now VERSION_INFO.Revision
- test.exe is now a comprehensive set of unit tests
- cAutoPtr.h now modifies unique_ptr to be easier to use (this can be turned off)
- Custom allocators now verify deallocated pointers and fill them with junk values when possible in debug mode
- All custom allocators using the Allocator class can be disabled by defining BSS_DISABLE_CUSTOM_ALLOCATORS. This is useful if a custom allocator does not fill deallocations with junk, or if the junk filling is insufficient, resulting in an invalid memory access bug being masked. Many compilers also have special hooks for detecting out of bounds memory accesses that only work with the default allocation routines.
- Rewrote cBinaryHeap
- Added bssreverse
- removed cVect.h
- Changed cAutoPtr to cUniquePtr
- Refactored the entire Compare methodology and introduced methods of doing only LT and GT comparisons.
- Created bss_algo.h and moved shuffle() to it.
- added for_all()
- added binsearch_near and variants
- Implemented library wide utf8 decoding. Most wchar_t implementations remain, but all char* functions are translated to wchar_t internally. If you happen to recieve strings in wchar_t format, this allows you to avoid unnecessary encoding/decoding while still ensuring all text is utf8 enabled. You should #define _UNICODE in your application if you want to enforce unicode compatability. cStr conversion between cStr <-> cStrW use unicode encoder/decoders, so unicode information is always preserved.
- Removed wchar_t specialization from cINIstorage and certain other things. You can no longer output to a wostream - instead, all output will be utf8 encoded.
- Removed Iterator.h and standardized iterators for linked lists, added iterator based begin/end functions.
- Added non-standard removal specific iterator for linked lists.
- Extended compiler specific switches and available information
- Added x86_64 platform to project and configured for 64-bit compilation.
- Created workarounds for assembly based functions and removed others in x86_64, allowing bss_util to compile in x86_64
- Adjusted some x86 assembly and added CPU_Barrier() as an efficient way to prevent CPU re-ordering.
- Changed hash to use iterators
- Existing iterator Begin/IterStart functions renamed to begin() to support range-based for loops
- Added unit testing.
- Fixed extremely subtle bug in cINIStorage and several other bugs

0.3.81
------
- Added CLASS_PROP_VAL and CLASS_PROP_WRITEONLY_VAL for value-type class property generation
- Added smaller valued log2() overloads (ushort and uchar)
- Changed cSettings CMD parsing to simply interprete the existence of a boolean flag as setting the value to true
- Fixed a cSettings const char* assignment glitch
- cSettings now forces char values to write as numbers
- Added char values to possible conversions for cINIEntry
- Added bytesearch() function
- Fixed bizarre bug where fopen in text mode "helpfully" replaced all \n with \n\r and caused infinitely expanding newlines.
- Added generic Iterator class and linkedlist implementations
- Made header gaurds more unique
- Changed the command argument parser to return an unsigned int on size
- filesize returns an unsigned long long instead of an unsigned int
- Added SSCANF to deprecated list
- cMap now properly uses the Key traits
- Fixed unholy deluge of useless dll warnings spawned by cStr
- cArrayConstruct now properly copies values from other cArrayConstruct objects with respect to constructors
- Made cArraySafe which properly deconstructs and reconstructs all objects for full type safety
- cArraySort and cMap can now use any cArraySimple/cArrayConstruct/cArraySafe 
- Added IsValid() helper function to cINIentry
- Implemented cAutoPtr (modification of standard auto_ptr)
- Changed all GetSize/GetLength to just Size()/Length()
- Added cAutoRef
- cObjSwap now allows arrays
- Completely rewrote bss_Log
- Added cArrayCircular
- Added check for self-assignment to most assignment operators where necessary
- Added move semantics to all low-level objects
- Added GetBitMask and C equivelent
- Changed cArraySimple to require cArrayWrap to be accessible (reduces inheritance issues)

0.3.8
-----
- Initial Public Release